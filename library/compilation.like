Compilation
-----------
Just-in-time (JIT) compilation is the key feature enabling Likely algorithms to execute fast. *[Hello World](?show=hello_world)* (reproduced below) made use of the JIT compiler to create a function that returns a new image with every pixel intensity divided in half.

    lenna = read("../data/misc/lenna.tiff")
    dark_lenna = divide{2}(lenna)

Let's **deconstruct this example** to see what's taking place behind the scenes:

    lenna = read("../data/misc/lenna.tiff")
    divide2 = divide{2}
    likely_ir = parse(divide2)
    jit_function = compile(likely_ir)
    dark_lenna = jit_function(lenna)

    show(divide, "divide")
    show(divide2, "divide2")
    show(likely_ir, "likely_ir")
    show(jit_function, "jit_function")

**divide** is a standard library function that returns *source code* expression of scalar division. **divide2** is a closure around the *divide* function with *2* bound as the denominator. The **parse** function retrieves the source code representation from a closure. This source code is called the **Likely Intermediate Representation**, or *Likely IR* for short. **compile** returns a **JIT-compiled function** from the specified IR, which is subsequently called with **lenna** to produce **dark_lenna**.

All of these intermediate steps happen automatically when an expression **divide{2}(lenna)** is assigned to a variable **dark_lenna**.

[Previous](?show=matrix_io) | [Next](?show=c_api)
