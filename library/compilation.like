Compilation
-----------
Just-in-time (JIT) compilation is the key feature enabling Likely algorithms to execute fast. [Hello World](?show=hello_world) (reproduced below) made use of the JIT compiler to create a function that returns a new image with every pixel intensity divided in half.

    lenna = read("../data/misc/lenna.tiff")
    dark_lenna = divide{2}(lenna)

Let's **deconstruct this example** to see what's taking place behind the scenes:

    lenna = read("../data/misc/lenna.tiff")
    divide2 = divide{2}
    likely_ir = tostring(divide2)
    jit_function = compile(likely_ir)
    dark_lenna = jit_function(lenna)

    show(divide, "divide")
    show(divide2, "divide2")
    show(likely_ir, "likely_ir")
    show(jit_function, "jit_function")

**divide** is a standard library function that returns _source code_ expressing scalar division. **divide2** is a closure around the *divide* function with *2* bound as the denominator. Closures implement the **tostring** operator to return source code representing their operation. This source code is called the **Likely Intermediate Representation** or *Likely IR*. **compile** returns a **JIT-compiled function** for the given IR, which is subsequently called with **lenna** to produce **dark_lenna**.

All of these intermediate steps happen automatically when a closure **divide{2}** is called with arguments **(lenna)**.

[Previous](?show=core_functions) | [Next](?show=arithmetic)
