project(likely)
cmake_minimum_required(VERSION 2.8.9)

# Configure
set(CMAKE_INCLUDE_CURRENT_DIR ON)
set(CPACK_PACKAGE_NAME "Likely")
set(CPACK_PACKAGE_DESCRIPTION "Literate Kernel Library")
set(CPACK_PACKAGE_VERSION_MAJOR 0)
set(CPACK_PACKAGE_VERSION_MINOR 1)
set(CPACK_PACKAGE_VERSION_PATCH 0)
set(CMAKE_AUTOMOC ON)

# C++11 Compiler flags
if(APPLE)
  set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -stdlib=libc++")
  set(CMAKE_SHARED_LINKER_FLAGS "${CMAKE_SHARED_LINKER_FLAGS} -stdlib=libc++")
  set(CMAKE_EXE_LINKER_FLAGS "${CMAKE_SHARED_LINKER_FLAGS} -stdlib=libc++")
endif()
if(NOT MSVC)
  set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -fvisibility=hidden")
endif()

macro(get_subdirectories result curdir)
  file(GLOB children RELATIVE ${curdir} ${curdir}/*)
  set(dirlist "")
  foreach(child ${children})
    if(IS_DIRECTORY ${curdir}/${child})
      set(dirlist ${dirlist} ${child})
    endif()
  endforeach()
  set(${result} ${dirlist})
endmacro()

# Build LLVM
set(LLVM_TARGETS_TO_BUILD "host" CACHE STRING "LLVM targets")
set(LLVM_INCLUDE_TOOLS OFF CACHE BOOL "Build LLVM tools")
set(LLVM_INCLUDE_EXAMPLES OFF CACHE BOOL "Build LLVM examples")
set(LLVM_INCLUDE_TESTS OFF CACHE BOOL "Build LLVM tests")
set(LLVM_INCLUDE_DOCS OFF CACHE BOOL "Build LLVM docs")
add_subdirectory(llvm)
set(CMAKE_MODULE_PATH "${CMAKE_BINARY_DIR}/llvm/share/llvm/cmake/")
include(LLVMConfig)
include_directories(${CMAKE_SOURCE_DIR}/llvm/include)
include_directories(${CMAKE_BINARY_DIR}/llvm/include)
link_directories(${LLVM_LIBRARY_DIRS})
add_definitions(${LLVM_DEFINITIONS})
llvm_map_components_to_libraries(REQ_LLVM_LIBRARIES mcjit native vectorize)

option(LIKELY_AUX "Build Likely with matrix I/O and debugging" ON)
if(${LIKELY_AUX})
  set(WITH_CUDA OFF)
  set(WITH_OPENEXR OFF)
  get_subdirectories(DISABLED_OPENCV_MODULES "${CMAKE_SOURCE_DIR}/opencv/modules")
  set(REQUIRED_OPENCV_MODULES core imgproc highgui)
  list(REMOVE_ITEM DISABLED_OPENCV_MODULES ${REQUIRED_OPENCV_MODULES}) # Disable all but these
  foreach(OPENCV_MODULE ${DISABLED_OPENCV_MODULES})
    set(BUILD_opencv_${OPENCV_MODULE}_INIT OFF)
  endforeach()
  add_subdirectory(opencv)
  foreach(OPENCV_MODULE ${REQUIRED_OPENCV_MODULES})
    include_directories(opencv/modules/${OPENCV_MODULE}/include)
  endforeach()
endif()

option(LIKELY_SCRIPT "Build Likely with Lua frontend (requires LIKELY_AUX)" ON)
if(${LIKELY_SCRIPT})
  add_subdirectory(lua)
  include_directories(lua/src ${CMAKE_BINARY_DIR}/lua)
endif()

if(CMAKE_COMPILER_IS_GNUCC)
  set(CXX11 "-std=gnu++11")
else()
  set(CXX11 "-std=c++11")
endif()

if(NOT MSVC)
  set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} ${CXX11} -Wall -Wextra -Wno-unused-parameter -fno-rtti")
endif()

include_directories(include share/likely)
add_subdirectory(src)
add_subdirectory(app)
