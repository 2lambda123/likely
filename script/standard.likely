Likely Kernel Library
=====================

 > An image recognition runtime for heterogenous architectures.
 > -- [@jklontz](https://github.com/jklontz)

## Introduction
Welcome to the documentation and source code for _Likely_, the image recognition programming language!

**Skip to the good stuff: [examples](./index.html?show=examples), [demos](./index.html?show=demos), [benchmark](./index.html?show=benchmark.tsv).**

### Principles
 - Heterogeneous hardware architecture support
 - Efficient syntax for feature representation and statistical learning
 - Immediate visual feedback during algorithm development
 - Embeddable into other projects and languages
 - Free open source software

### Help
We try to keep this document complete and correct. However, should you run into trouble, please feel free to ask questions on our [mailing list](https://groups.google.com/forum/#!forum/likely-dev) or report bugs on our [issue tracker](https://github.com/biometrics/likely/issues). Consider starting with **hello world in [Likely](./index.html?show=hello_world) and [C](src/hello_world.c)**.

#### This Document
**Likely is a [literate programming](http://en.wikipedia.org/wiki/Literate_programming) language.** In addition to documenting the project, this file is also the [source code](script/standard.likely) for the standard library. Likely uses [Github Flavored Markdown](https://help.github.com/articles/github-flavored-markdown) (GFM) syntax, and the Likely runtime will automatically extract and execute _code blocks_ found in GFM source files.

#### License
Likely is licensed under [Apache 2.0](LICENSE.txt), meaning it is *free for academic and commercial use*.

### Background
The software engineering of a complex system is often facilitated by a _Domain Specific Language_ (DSL) whose syntax is designed to concisely and efficiently solve problems frequently encountered in the domain. While many technical communities rely on DSLs, there currently exists no DSL designed for image recognition. As a consequence, most libraries and applications are written in either _C++_ or _MATLAB_, neither of which respect both the engineer's time and the hardware's compute capability.

> A just-in-time compiled DSL for image recognition is essential to express algorithms that are currently too complex to implement in native languages and too inefficient to execute in scripting languages.

### Portability
Likely is built on top of the _Low Level Virtual Machine_ (LLVM) compiler infrastructure using a portable subset of ISO C++11, which means it runs [everywhere](http://llvm.org/docs/GettingStarted.html#hardware) LLVM does. Algorithms execute natively on single CPU threads via the LLVM _Machine Code Just-In-Time_ (MCJIT) compiler, multi-core CPUs via a custom _OpenMP_-like backend, and GPUs and coprocessors via _CUDA_ or _OpenCL_.

| Backend     | Status |
|-------------|--------|
| Single-core | Done   |
| Multi-core  | Done   |
| CUDA        | [#24](https://github.com/biometrics/likely/issues/24) |
| OpenCL      | [#25](https://github.com/biometrics/likely/issues/25) |

### Speed
Likely relies on the powerful and well established LLVM compiler infrastructure to make function execution as fast as possible. Since compilation is held off until runtime, functions automatically leverage all instruction set extensions and co-processors available on the host. Delaying compilation until runtime also enables optimization opportunities that are impossible in conventional languages and libraries. In fact, the entire premise of Likely is hinged on the observation that for image processing applications

> while funtions must be written generically to handle any matrix type, at runtime they tend to be executed repeatedly on the same type.

The repeated execution of a function with the same matrix type means that branching to handle different data types is unnecessary, entire loops and code blocks can be eliminated, and many values that would be runtime parameters can instead become compile time constants. For these reasons, we expect Likely to be faster than equally-generic statically-compiled native code.

### Motivation
This section considers some of the drawbacks in using the two incumbent languages in the field (C++ and MATLAB) to help motivate why an image recognition DSL is important. It is a work in progress, so please [let us know](https://groups.google.com/forum/#!forum/likely-dev) if you disagree with this analysis or would like to contribute to it!

#### Why not C++?
As image recognition engineers, we desire a curated set of image processing and statistical learning functions from which to compose higher-order algorithms. Of fundamental concern is the  construction of leak-free abstractions that enable complex reasoning. To do so

> functions must be expressed generically, and only once, to a compiler capable of automatically determining _how_ and _where_ given source code that says _what_.

Despite the multi-paradigm virtues of C++, it is extraordinarily difficult to provide library routines that are both truly generic and efficient. To illustrate this point, consider the following library function for adding two vectors:

```C++
void add(const float *a, const float *b, float *c, unsigned int n) {
    for (unsigned int i = 0; i < n; i++)
        c[i] = a[i] + b[i];
}
```

##### Aliasing
While this function is simple, it is neither particularly fast nor generic. A popular assumption made in numerical libraries is that pointers never _alias_. In other words, variables _a_, _b_ and _c_ point to distinct non-overlapping regions in memory. The C++ language specification states that pointers of the same type may alias, so the compiler must insert a runtime check when vectorizing loops. While C has since introduced the _restrict_ keyword to specify pointers that do not alias, this keyword is not supported in the C++ standard and is implemented instead through compiler-specific annotations:

```C++
void add(const float * __restrict a, const float * __restrict b, float * __restrict c, unsigned int n) {
    for (unsigned int i = 0; i < n; i++)
        c[i] = a[i] + b[i];
}
```

Similar to [Fortran and pure functional langauges](http://en.wikipedia.org/wiki/Pointer_aliasing#Aliasing_and_re-ordering), when writing image recognition algorithms we're interested in a compiler that assumes pointers don't alias, instead of relying on an often-forgotten language extension to explicitly say so.

##### Generics
Most image processing operations make sense to express for a variety of data types, so we might try to generalize our function using templates:

```C++
template <typename T>
void add(const T *a, const T *b, T *c, unsigned int n) {
    for (unsigned int i = 0; i < n; i++)
        c[i] = a[i] + b[i];
}
```

However, what if we would like _a_ or _b_ to be a numerical constant? Or _c_ to be a different type? This author knows of know way to do this without resorting to partial template specialization, which runs counter to our principle of only implementing a function only once.

##### Saturation
Arithmetic overflow is a common problem encoutered in image processing. So common in fact that OpenCV [always](http://docs.opencv.org/modules/core/doc/intro.html#saturation-arithmetics) uses it for 8- and 16-bit integer arithmetic.

```C++
template<> inline uchar saturate_cast<uchar>(int v)
{ return (uchar)((unsigned)v <= UCHAR_MAX ? v : v > 0 ? UCHAR_MAX : 0); }
```

But what if your algorithm is designed to avoid overflows and this _select_ instruction is unnecessary?

##### Parallelization
What if we'd like our function to execute in parallel on multiple CPU cores? Or on a GPU if it is available? OpenMP and OpenCL provide cross-platform solutions here, but not without having to mark-up or maintain multiple copies of our function. Image recognition is often embarasingly parallel, and we'd like the compiler parallelize our algorithms automatically.

##### Conclusion
The critical reader will no doubt observe that C++ offers reasonable solutions to each of the individual considerations mentioned above. However, in reality an algorithm designer must wrestle with all of these considerations simultaneously, and it takes a herculean effort to do so. Consider the software engineering involved in implementing and maintaining OpenCV's optimized generic matrix addition and subtraction [arithm_op](https://raw.github.com/Itseez/opencv/master/modules/core/src/arithm.cpp) function. Yet it's still a leaky abstraction because it prevents arguably the single most important optimization that can be made when writing image processing algorithms: avoiding memory I/O when chaining together multiple arithmetic operations. Writing generic code while juggling all of these optimization considerations requires considerable cognitive load and developement time that would be better spent designing algorithms with a compiler that automatically handled them.

### Why not MATLAB?
`To Be Continued`

### Why not _X_?
How well does _X_ support the following features?
 - Alias analysis
 - Generic types
 - Saturation arithmetic
 - Vectorization
 - Multi-core processors
 - Co-processors
 - Simple pixel access
 - Dense, cropped, and sparse matricies
 - Integral images
 - Model training
 - Algorithm visualization and interaction

## C API
C/C++ projects should `#include <likely.h>` and link against the `likely` library. `LikelyConfig.cmake` is provided in `share/likely/` as a convenience to CMake developers. Likely definitions are prefixed with `likely_` and use a `lowercase_underscore` naming convention. Consider taking a moment to skim the [header file](include/likely.h).

### The Matrix Struct
The `likely_mat`, or _matrix_, is only struct in the API and serves as the input and output for all function invocations:

| Field    | Type           | Description                       |
|----------|----------------|-----------------------------------|
| data     | likely_data    | Pointer to the buffer of elements |
| d_ptr    | likely_private | Used for internal bookkeeping     |
| channels | likely_size    | Matrix dimension                  |
| columns  | likely_size    | Matrix dimension                  |
| rows     | likely_size    | Matrix dimension                  |
| frames   | likely_size    | Matrix dimension                  |
| type     | likely_type    | Matrix type                       |

The last five fields (_channels_, _columns_, _rows_, _frames_, and _type_) are collectively referred to as the matrix _header_. In contrast to most image processing libraries which tend to feature 3-dimensional matrices (channels, columns, rows), Likely includes a fourth dimension, frames, in order to facilitate processing videos or collections of images.

#### Element Access
By convention, element layout in the data buffer with resepect to decreasing spatial locality is _channel_, _column_, _row_, _frame_. Thus an element at channel _c_, column _x_, row _y_, and frame _t_, can be retrieved like:
```C++
float likely_get_element(likely_mat m, likely_size c, likely_size x, likely_size y, likely_size t)
{
    likely_size columnStep = m->channels;
    likely_size rowStep = m->channels * columnStep;
    likely_size frameStep = m->rows * rowStep;
    likely_size index = t*frameStep + y*rowStep + x*columnStep + c;
    assert(likely_type(m) == likely_type_f32);
    return reinterpret_cast<float*>(m->data)[index];
}
```

Convenience functions `likely_element` and `likely_set_element` are provided for individual element access. These functions are inefficient for iterating over a large numbers of elements due to the repeated index calculations, and their use is suggested only for debugging purposes or when the matrix is known to be small.

#### Matrix Type
As suggested earlier, `likely_type` plays a critical role in determining how to process matricies. The type is a 4-byte _bit field_ that encodes what data type the matrix is and how/where it should be processed. It also specifies knowledge used to optimized code generation and by removing unneccesary indexing, looping, and branching.

Here is the layout of the bits in `likey_type`:

| Field         | Bits | Mask       |
|---------------|------|------------|
| depth         | 8    | 0x000000FF |
| signed        | 1    | 0x00000100 |
| floating      | 1    | 0x00000200 |
| parallel      | 1    | 0x00000400 |
| heterogeneous | 1    | 0x00000800 |
| multi_channel | 1    | 0x00001000 |
| multi_column  | 1    | 0x00002000 |
| multi_row     | 1    | 0x00004000 |
| multi_frame   | 1    | 0x00008000 |
| saturation    | 1    | 0x00010000 |
| reserved      | 15   | 0xFFFE0000 |

Convenience functions `likely_<field>` and `likely_set_<field>` are provided for querying and editing the type.

### Type abbreviations
```Lua
null = likely.null
depth = likely.depth
signed = likely.signed
floating = likely.floating
u8 = likely.u8
u16 = likely.u16
u32 = likely.u32
u64 = likely.u64
i8 = likely.i8
i16 = likely.i16
i32 = likely.i32
i64 = likely.i64
f16 = likely.f16
f32 = likely.f32
f64 = likely.f64
parallel = likely.parallel
multi_channel = likely.multi_channel
multi_column = likely.multi_column
multi_row = likely.multi_row
multi_frame = likely.multi_frame
saturation = likely.saturation
reserved = likely.reserved

i = "i"
c = "c"
x = "x"
y = "y"
t = "t"
```

### Core functions
```Lua
function chain(x,y)
  return function(w) return tostring(y{tostring(x{w})}) end
end

closure = likely.closure

new = closure(
  nil,
  "Create an empty matrix",
  {{"type", "matrix type", f32},
   {"channels", "matrix channels", 1},
   {"columns", "matrix columns", 1},
   {"rows", "matrix rows", 1},
   {"frames", "matrix frames", 1},
   {"data", "address of existing data buffer", 0},
   {"copy", "copy the data buffer", false}},
  likely.new)

scalar = closure(
  nil,
  "Create a matrix from a number",
  {{"value", "matrix value"}},
  likely.scalar)

read = closure(
  nil,
  "Create a matrix from a file",
  {{"file_name", "path to file on disk"}},
  likely.read)

compile = closure(
  nil,
  "Create kernel",
  {{"function", "function expression"}},
  likely.compile)

show = closure(
  nil,
  "Display a value",
  {{"value", "value to display"},
   {"name", "display title", ""}},
  likely.show)
```

### Utility functions
```Lua
function likely.s(...)
  return "(" .. table.concat({...}, " ") .. ")"
end
s = likely.s
```

### Arithmetic
```Lua
add = closure(
  function(rhs, lhs) return s("+", lhs, rhs) end,
  "Arithmetic addition",
  {{"rhs", "right hand side"},
   {"lhs", "left hand side"}})

subtract = closure(
  function(rhs, lhs) return s("-", lhs, rhs) end,
  "Arithmetic subtraction",
  {{"rhs", "right hand side"},
   {"lhs", "left hand side"}})

multiply = closure(
  function(rhs, lhs) return s("*", lhs, rhs) end,
  "Arithmetic multiplication",
  {{"rhs", "right hand side"},
   {"lhs", "left hand side"}})

divide = closure(
  function(rhs, lhs)
    if rhs == 0 then
      error("Denominator is zero!")
    else
      return s("/", lhs, rhs)
    end
  end,
  "Arithmetic division",
  {{"rhs", "left hand side (denominator)"},
   {"lhs", "right hand side (numerator)"}})
```

### Math
```Lua
sqrt = closure(
  function(x) return s("sqrt", x) end,
  "Square root: f(x) = x ** 0.5",
  {{"x", "operand"}})

powi = closure(
  function(n, x) return s("powi", x, n) end,
  "Integer power: f(x) = x ** n",
  {{"x", "base"},
   {"n", "integer exponent"}})

sin = closure(
  function(x) return s("sin", x) end,
  "Sine: f(x) = sin(x)",
  {{"x", "radians"}})

cos = closure(
  function(x) return s("cos", x) end,
  "Cosine: f(x) = cos(x)",
  {{"x", "operand"}})

pow = closure(
  function(n, x) return s("pow", x, n) end,
  "Power: f(x) = x ** n",
  {{"x", "base"},
   {"n", "exponent"}})

exp = closure(
  function(x) return s("exp", x) end,
  "Base-e exponential: f(x) = e ** x",
  {{"x", "exponent"}})

exp2 = closure(
  function(x) return s("exp2", x) end,
  "Base-2 exponential: f(x) = 2 ** x",
  {{"x", "exponent"}})

log = closure(
  function(x) return s("log", x) end,
  "Natural logarithm: f(x) = log_e(x)",
  {{"x", "operand"}})

log10 = closure(
  function(x) return s("log10", x) end,
  "Base-10 logarithm: f(x) = log_10(x)",
  {{"x", "operand"}})

log2 = closure(
  function(x) return s("log2", x) end,
  "Base-2 logarithm: f(x) = log_2(x)",
  {{"x", "operand"}})

fma = closure(
  function(a, c, x) return s("fma", a, x, c) end,
  "Fused multiply-add: f(a, b, x) = a * x + c",
  {{"a", "operand"},
   {"c", "operand"},
   {"x", "operand"}})

fabs = closure(
  function(x) return s("fabs", x) end,
  "Floating absolute value: f(x) = |x|",
  {{"x", "operand"}})

copysign = closure(
  function(s, m) return s("copysign", m, s) end,
  "Floating copy sign: f(x) = copysign(m, s)",
  {{"s", "value containing sign"},
   {"m", "value containing magnitude"}})

floor = closure(
  function(x) return s("floor", x) end,
  "Floating floor: f(x) = floor(x)",
  {{"x", "operand"}})

ceil = closure(
  function(x) return s("ceil", x) end,
  "Floating ceil: f(x) = ceil(x)",
  {{"x", "operand"}})

trunc = closure(
  function(x) return s("trunc", x) end,
  "Floating round toward zero: f(x) = x > 0 ? floor(x) : ceil(x)",
  {{"x", "operand"}})

rint = closure(
  function(x) return s("rint", x) end,
  "Floating round to nearest integer: f(x) = rint(x)",
  {{"x", "operand"}})

nearbyint = closure(
  function(x) return s("nearbyint", x) end,
  "Floating round to nearest integer: f(x) = nearbyint(x)",
  {{"x", "operand"}})

round = closure(
  function(x) return s("round", x) end,
  "Floating round to nearest integer: f(x) = round(x)",
  {{"x", "operand"}})
```

### Casting
```Lua
cast = closure(
  function(type, x) return s("cast", x, type) end,
  "Cast matrix to another type",
  {{"type", "Likely type"},
   {"x", "operand"}})
```

### Comparison
```Lua
lt = closure(
  function(rhs, lhs) return s("<", lhs, rhs) end,
  "Check if lhs is less than rhs",
  {{"rhs", "right hand side"},
   {"lhs", "left hand side"}})

le = closure(
  function(rhs, lhs) return s("<=", lhs, rhs) end,
  "Check if lhs is less than or equal to rhs",
  {{"rhs", "right hand side"},
   {"lhs", "left hand side"}})

gt = closure(
  function(rhs, lhs) return s(">", lhs, rhs) end,
  "Check if lhs is greater than rhs",
  {{"rhs", "right hand side"},
   {"lhs", "left hand side"}})

ge = closure(
  function(rhs, lhs) return s(">=", lhs, rhs) end,
  "Check if lhs is greater than or equal to rhs",
  {{"rhs", "right hand side"},
   {"lhs", "left hand side"}})

eq = closure(
  function(rhs, lhs) return s("==", lhs, rhs) end,
  "Check if lhs is equal to rhs",
  {{"rhs", "right hand side"},
   {"lhs", "left hand side"}})

ne = closure(
  function(rhs, lhs) return s("!=", lhs, rhs) end,
  "Check if lhs is not equal to rhs",
  {{"rhs", "right hand side"},
   {"lhs", "left hand side"}})
```

### Image Processing
```Lua
threshold = closure(
  function(val, x) return s("threshold", x, val) end,
  "Binary threshold",
  {{"val", "threshold"},
   {"x", "operand"}})

set = closure(
  function(value, matrix)
    return value
  end,
  "Assignment",
  {{"value", "numerical constant"},
   {"matrix", "used to determine output size and type"}})
```
