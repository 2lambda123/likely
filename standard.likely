-- Likely Standard Library

-- Type abbreviations
null = likely.null
depth = likely.depth
signed = likely.signed
floating = likely.floating
u8 = likely.u8
u16 = likely.u16
u32 = likely.u32
u64 = likely.u64
i8 = likely.i8
i16 = likely.i16
i32 = likely.i32
i64 = likely.i64
f16 = likely.f16
f32 = likely.f32
f64 = likely.f64
parallel = likely.parallel
single_channel = likely.single_channel
single_column = likely.single_column
single_row = likely.single_row
single_frame = likely.single_frame
saturation = likely.saturation
reserved = likely.reserved

-- Core functions
closure = likely.closure

new = closure(
  nil,
  "Create an empty matrix",
  {{"type", "matrix type", f32},
   {"channels", "matrix channels", 1},
   {"columns", "matrix columns", 1},
   {"rows", "matrix rows", 1},
   {"frames", "matrix frames", 1},
   {"data", "address of existing data buffer", 0},
   {"copy", "copy the data buffer", false}},
  likely.new)

read = closure(
  nil,
  "Create a matrix from a file",
  {{"file_name", "path to file on disk"}},
  likely.read)

compile = closure(
  nil,
  "Create kernel",
  {{"function", "function expression"}},
  likely.compile)

-- Examples
likely.examples =
{
[[
-- Hello World
-- Source code is re-executed as you type\dream{activate:message}
message = "Hello World!"

-- \dream{CTRL}+click variables to display values
lenna = read("img/Lenna.tiff")

-- \dream{CTRL}+scroll to edit numerical constants
dark_lenna = divide(2)(lenna)
]],
[[
-- Function Calls
-- Arguments can be assigned explicitly by name...\dream{activate:new}
x = new{rows=512, columns=512, type=f32}

-- ...or anonymously in their canonical order.
y = new(f32, 1, 512, 512)

-- In the latter case, arguments are assigned to the first parameter without a default value. If all parameters have default values then arguments will replace the left-most values.
]],
[[
-- Closures
x = new{rows=512, columns=512, type=i8}

-- When a function is called without all of its arguments specified, a new function is returned with the bound arguments.\dream{activate:set}\dream{activate:setZero}
setZero = set(0)

-- Once all the arguments have been provided, the function is compiled and executed.\dream{activate:y}
y = setZero(x)

-- set(0)(x)
--     ^  ^
--     |  Run-time arguments
--     Compile-time arguments
]],
[[
-- Arithmetic
lenna = read("img/Lenna.tiff")

-- Saturation arithmetic is part of the type system
lenna.saturation = true

-- Likely will automatically apply operations to all elements in a matrix
added = add(32)(lenna)
subtracted = subtract(32)(lenna)
multiplied = multiply(2)(lenna)
divided = divide(2)(lenna)
]]
}

-- Utility functions
function likely.concat(...)
  return table.concat({...}, " ")
end

function likely.isnum(...)
  for k,v in ipairs{...} do
    if type(v) ~= "number" then
      return false
    end
  end
  return true
end

-- Basic arithmetic
set = closure(
  function(value, matrix)
    return value
  end,
  "Assignment",
  {{"value", "numerical constant"},
   {"matrix", "used to determine output size and type"}})

add = closure(
  function(rhs, lhs)
    if likely.isnum(rhs, lhs) then
      return lhs + rhs
    elseif rhs == 0 then
      return lhs
    elseif lhs == 0 then
      return rhs
    else
      return likely.concat(lhs, rhs, "+")
    end
  end,
  "Arithmetic addition",
  {{"rhs", "right hand side"},
   {"lhs", "left hand side"}})

subtract = closure(
  function(rhs, lhs)
    if likely.isnum(rhs, lhs) then
      return lhs - rhs
    elseif lhs == 0 then
      return rhs
    else
      return likely.concat(lhs, rhs, "-")
    end
  end,
  "Arithmetic subtraction",
  {{"rhs", "right hand side"},
   {"lhs", "left hand side"}})

multiply = closure(
  function(rhs, lhs)
    if likely.isnum(rhs, lhs) then
      return lhs * rhs
    elseif rhs == 1 then
      return lhs
    elseif lhs == 1 then
      return rhs
    else
      return likely.concat(lhs, rhs, "*")
    end
  end,
  "Arithmetic multiplication",
  {{"rhs", "right hand side"},
   {"lhs", "left hand side"}})

divide = closure(
  function(rhs, lhs)
    if rhs == 0 then
      error("Denominator is zero!")
    elseif likely.isnum(rhs, lhs) then
      return lhs / rhs
    elseif rhs == 1 then
      return lhs
    else
      return likely.concat(lhs, rhs, "/")
    end
  end,
  "Arithmetic division",
  {{"lhs", "left hand side (denominator)"},
   {"rhs", "right hand side (numerator)"}})

-- Basic math
log = closure(
  function(operand)
    if likely.isnum(operand) then
      return log(operand)
    else
      return likely.concat(operand, "log")
    end
  end,
  "Logarithmic function",
  {{"operand", "operand"}})

log2 = closure(
  function(operand)
    if likely.isnum(operand) then
      return log2(operand)
    else
      return likely.concat(operand, "log2")
    end
  end,
  "Logarithmic function with base 2",
  {{"operand", "operand"}})

log10 = closure(
  function(operand)
    if likely.isnum(operand) then
      return log10(operand)
    else
      return likely.concat(operand, "log10")
    end
  end,
  "Logarithmic function with base of 10",
  {{"operand", "operand"}})

sin = closure(
  function(operand)
    if likely.isnum(operand) then
      return sin(operand)
    else
      return likely.concat(operand, "sin")
    end
  end,
  "Sine function",
  {{"operand", "operand"}})

cos = closure(
  function(operand)
    if likely.isnum(operand) then
      return cos(operand)
    else
      return likely.concat(operand, "cos")
    end
  end,
  "Cosine function",
  {{"operand", "operand"}})

fabs = closure(
  function(operand)
    if likely.isnum(operand) then
      return fabs(operand)
    else
      return likely.concat(operand, "fabs")
    end
  end,
  "Absolute Value function",
  {{"operand", "operand"}})

sqrt = closure(
  function(operand)
    if likely.isnum(operand) then
      return sqrt(operand)
    else
      return likely.concat(operand, "sqrt")
    end
  end,
  "Square Root function",
  {{"operand", "operand"}})

exp = closure(
  function(operand)
    if likely.isnum(operand) then
      return exp(operand)
    else
      return likely.concat(operand, "exp")
    end
  end,
  "Exponential function",
  {{"operand", "operand"}})

pow = closure(
  function(rhs, lhs)
    if likely.isnum(rhs, lhs) then
      return pow(lhs, rhs)
    else
      return likely.concat(lhs, rhs, "pow")
    end
  end,
  "Power Function",
  {{"rhs", "right hand side"},
   {"lhs", "left hand side"}})

-- Casting functions
zext = closure(
  function(rhs, lhs)
    if likely.isnum(rhs, lhs) then
      return zext(lhs, rhs)
    else
      return likely.concat(lhs, rhs, "zext")
    end
  end,
  "Zero extend function",
  {{"rhs", "right hand side"},
   {"lhs", "left hand side"}})

sext = closure(
  function(rhs, lhs)
    if likely.isnum(rhs, lhs) then
      return sext(lhs, rhs)
    else
      return likely.concat(lhs, rhs, "sext")
    end
  end,
  "Sign extend function",
  {{"rhs", "right hand side"},
   {"lhs", "left hand side"}})

fpext = closure(
  function(rhs, lhs)
    if likely.isnum(rhs, lhs) then
      return fpext(lhs, rhs)
    else
      return likely.concat(lhs, rhs, "fpext")
    end
  end,
  "Floating point extend function",
  {{"rhs", "right hand side"},
   {"lhs", "left hand side"}})

trunc = closure(
  function(rhs, lhs)
    if likely.isnum(rhs, lhs) then
      return trunc(lhs, rhs)
    else
      return likely.concat(lhs, rhs, "trunc")
    end
  end,
  "Truncate function",
  {{"rhs", "right hand side"},
   {"lhs", "left hand side"}})

fptrunc = closure(
  function(rhs, lhs)
    if likely.isnum(rhs, lhs) then
      return fptrunc(lhs, rhs)
    else
      return likely.concat(lhs, rhs, "fptrunc")
    end
  end,
  "Floating point truncate function",
  {{"rhs", "right hand side"},
   {"lhs", "left hand side"}})
