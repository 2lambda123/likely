-- Likely Standard Library

-- Core functions
closure = likely.closure

new = closure(
  nil,
  "Create an empty matrix",
  {{"hash", "matrix hash", likely.f32},
   {"channels", "matrix channels", 1},
   {"columns", "matrix columns", 1},
   {"rows", "matrix rows", 1},
   {"frames", "matrix frames", 1},
   {"data", "address of existing data buffer", 0},
   {"copy", "copy the data buffer", 0}},
  likely.new)

read = closure(
  nil,
  "Create a matrix from a file",
  {{"file_name", "path to file on disk"}},
  likely.read)

compile = closure(
  nil,
  "Create kernel",
  {{"function", "function expression"}},
  likely.compile)

console = ""
function likely.print(...)
  if #console > 0 then
    console = console .. "\n"
  end
  args = {...}
  for k,v in ipairs(args) do
    console = console .. tostring(v)
    if k ~= #args then
      console = console .. " "
    end
  end
end
print = likely.print

-- Examples
likely.examples =
{
[[
-- Hello World
-- Source code is re-executed as you type
print("Hello World!")

-- CTRL+click variables to display values
lenna = read("img/Lenna.tiff")

-- CTRL+scroll to edit numerical constants
dark_lenna = divide(2)(lenna)
]],
[[
-- Function Calls
-- Arguments can be assigned explicitly by name...
x = new{rows=512, columns=512, hash=likely.f32}

-- ...or anonymously in their canonical order.
y = new(likely.f32, 1, 512, 512)

-- Anonymous arguments are assigned to the left-most default-less parameter. If all parameters have default values then arguments will replace the left-most default values.
]]
}

-- Utility functions
function likely.concat(...)
  return table.concat({...}, " ")
end

function likely.isnum(...)
  for k,v in ipairs{...} do
    if type(v) ~= "number" then
      return false
    end
  end
  return true
end

-- Basic arithmetic
add = closure(
  function(rhs, lhs)
    if likely.isnum(rhs, lhs) then
      return lhs + rhs
    else
      return likely.concat(lhs, rhs, "+")
    end
  end,
  "Arithmetic addition",
  {{"rhs", "right hand side"},
   {"lhs", "left hand side"}})

subtract = closure(
  function(rhs, lhs)
    if likely.isnum(rhs, lhs) then
      return lhs - rhs
    else
      return likely.concat(lhs, rhs, "-")
    end
  end,
  "Arithmetic subtraction",
  {{"rhs", "right hand side"},
   {"lhs", "left hand side"}})

multiply = closure(
  function(rhs, lhs)
    if likely.isnum(rhs, lhs) then
      return lhs * rhs
    else
      return likely.concat(lhs, rhs, "*")
    end
  end,
  "Arithmetic multiplication",
  {{"rhs", "right hand side"},
   {"lhs", "left hand side"}})

divide = closure(
  function(rhs, lhs)
    if likely.isnum(rhs, lhs) then
      return lhs / rhs
    else
      return likely.concat(lhs, rhs, "/")
    end
  end,
  "Arithmetic division",
  {{"rhs", "right hand side"},
   {"lhs", "left hand side"}})

-- Basic math
log = closure(
  function(operand)
    if likely.isnum(operand) then
      return log(operand)
    else
      return likely.concat(operand, "log")
    end
  end,
  "Logarithmic function",
  {{"operand", "operand"}})

log2 = closure(
  function(operand)
    if likely.isnum(operand) then
      return log2(operand)
    else
      return likely.concat(operand, "log2")
    end
  end,
  "Logarithmic function with base 2",
  {{"operand", "operand"}})

log10 = closure(
  function(operand)
    if likely.isnum(operand) then
      return log10(operand)
    else
      return likely.concat(operand, "log10")
    end
  end,
  "Logarithmic function with base of 10",
  {{"operand", "operand"}})

sin = closure(
  function(operand)
    if likely.isnum(operand) then
      return sin(operand)
    else
      return likely.concat(operand, "sin")
    end
  end,
  "Sine function",
  {{"operand", "operand"}})

cos = closure(
  function(operand)
    if likely.isnum(operand) then
      return cos(operand)
    else
      return likely.concat(operand, "cos")
    end
  end,
  "Cosine function",
  {{"operand", "operand"}})

fabs = closure(
  function(operand)
    if likely.isnum(operand) then
      return fabs(operand)
    else
      return likely.concat(operand, "fabs")
    end
  end,
  "Absolute Value function",
  {{"operand", "operand"}})

sqrt = closure(
  function(operand)
    if likely.isnum(operand) then
      return sqrt(operand)
    else
      return likely.concat(operand, "sqrt")
    end
  end,
  "Square Root function",
  {{"operand", "operand"}})

exp = closure(
  function(operand)
    if likely.isnum(operand) then
      return exp(operand)
    else
      return likely.concat(operand, "exp")
    end
  end,
  "Exponential function",
  {{"operand", "operand"}})

pow = closure(
  function(rhs, lhs)
    if likely.isnum(rhs, lhs) then
      return pow(lhs, rhs)
    else
      return likely.concat(lhs, rhs, "pow")
    end
  end,
  "Power Function",
  {{"rhs", "right hand side"},
   {"lhs", "left hand side"}})

-- Casting functions
zext = closure(
  function(rhs, lhs)
    if likely.isnum(rhs, lhs) then
      return zext(lhs, rhs)
    else
      return likely.concat(lhs, rhs, "zext")
    end
  end,
  "Zero extend function",
  {{"rhs", "right hand side"},
   {"lhs", "left hand side"}})

sext = closure(
  function(rhs, lhs)
    if likely.isnum(rhs, lhs) then
      return sext(lhs, rhs)
    else
      return likely.concat(lhs, rhs, "sext")
    end
  end,
  "Sign extend function",
  {{"rhs", "right hand side"},
   {"lhs", "left hand side"}})

fpext = closure(
  function(rhs, lhs)
    if likely.isnum(rhs, lhs) then
      return fpext(lhs, rhs)
    else
      return likely.concat(lhs, rhs, "fpext")
    end
  end,
  "Floating point extend function",
  {{"rhs", "right hand side"},
   {"lhs", "left hand side"}})

trunc = closure(
  function(rhs, lhs)
    if likely.isnum(rhs, lhs) then
      return trunc(lhs, rhs)
    else
      return likely.concat(lhs, rhs, "trunc")
    end
  end,
  "Truncate function",
  {{"rhs", "right hand side"},
   {"lhs", "left hand side"}})

fptrunc = closure(
  function(rhs, lhs)
    if likely.isnum(rhs, lhs) then
      return fptrunc(lhs, rhs)
    else
      return likely.concat(lhs, rhs, "fptrunc")
    end
  end,
  "Floating point truncate function",
  {{"rhs", "right hand side"},
   {"lhs", "left hand side"}})
