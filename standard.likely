-- Likely Standard Library

-- Spaces are used to separate tokens in the Likely intermediate representation
function likely.concat(...)
  return table.concat({...}, " ")
end

function likely.copy(t)
  local t2 = {}
  for k,v in pairs(t) do
    t2[k] = v
  end
  return t2
end

function likely.isnum(...)
  for k,v in ipairs{...} do
    if type(v) ~= "number" then
      return false
    end
  end
  return true
end

likely.stdout = ""
function likely.print(...)
  for k,v in ipairs{...} do
    likely.stdout = likely.stdout .. v .. " "
  end
  likely.stdout = likely.stdout .. "\n"
end
print = likely.print

-- Setup function abstractions
likely.func_mt = {}

function likely.func_mt.__call(f, ...)
  -- Likely functions support both regular Lua function call syntax and single argument tables,
  -- this code must disambiguate between the two and order named arguments appropriately.
  local allArgs = likely.copy(f.args)
  local offset = #f.args
  local args = {...}
  if #args == 1 and type(args[1]) == "table" then
    args = args[1]
  end

  needsCompilation = false
  for k,v in pairs(args) do
    if type(v) == "userdata" then
      needsCompilation = needsCompilation or (v.likely == "matrix")
    end
  end

  if needsCompilation then
    if not f.binary then
      f.binary = likely.compile(f, ...)
    end
    return f.binary(...)
  else
    for k,v in pairs(args) do
      if type(k) == "number" then
        allArgs[offset+k] = v
      else
        allArgs[f.parameterLUT[k]] = v
      end
    end

    if #allArgs == #f.parameters then
      return f.source(unpack(allArgs))
    elseif #allArgs > #f.parameters then
      local isVarArg = f.parameters[#f.parameters][1] == "..."
      if isVarArg then
        return f.source(unpack(allArgs))
      else
        error("too many arguments")
      end
    else
      -- Return a new function that binds these arguments
      return likely.func(f.source, f.documentation, f.parameters, allArgs)
    end
  end
end

function likely.func(source, documentation, parameters, args)
  local t = {}
  t.likely = "function"
  t.source = source
  t.documentation = documentation
  t.parameters = parameters  
  t.parameterLUT = {}
  for k,v in pairs(parameters) do
    t.parameterLUT[v[1]] = k
  end

  t.args = {}
  if type(args) == "table" then
    for k,v in pairs(args) do
      if type(k) == "number" then
        t.args[k] = v
      else
        t.args[t.parameterLUT[k]] = v
      end
    end
  end

  t.arity = #t.parameters - #t.args
  t.binary = nil
  setmetatable(t, likely.func_mt)
  return t
end

-- Shorthand for Likely global functions
func = likely.func
new = func(likely.new,
           "Create an empty matrix",
           {{"hash", "matrix hash"},
            {"channels", "matrix channels"},
            {"columns", "matrix columns"},
            {"rows", "matrix rows"},
            {"frames", "matrix frames"},
            {"data", "address of existing data buffer"},
            {"clone", "copy the data buffer"}})
read = func(likely.read,
            "Create a matrix from a file",
            {{"file_name", "path to file on disk"}})
compile = func(likely.compile,
               "Create kernel",
               {{"function", "function expression"},
                {"...", "matricies to initialize the function"}})

-- Basic arithmetic
add = func(
  function(rhs, lhs)
    if likely.isnum(rhs, lhs) then
      return lhs + rhs
    else
      return likely.concat(lhs, rhs, "+")
    end
  end,
  "Arithmetic addition",
  {{"rhs", "right hand side"},
  {"lhs", "left hand side"}})

subtract = func(
  function(rhs, lhs)
    if likely.isnum(rhs, lhs) then
      return lhs - rhs
    else
      return likely.concat(lhs, rhs, "-")
    end
  end,
  "Arithmetic subtraction",
  {{"rhs", "right hand side"},
   {"lhs", "left hand side"}})

multiply = func(
  function(rhs, lhs)
    if likely.isnum(rhs, lhs) then
      return lhs * rhs
    else
      return likely.concat(lhs, rhs, "*")
    end
  end,
  "Arithmetic multiplication",
  {{"rhs", "right hand side"},
  {"lhs", "left hand side"}})

divide = func(
  function(rhs, lhs)
    if likely.isnum(rhs, lhs) then
      return lhs / rhs
    else
      return likely.concat(lhs, rhs, "/")
    end
  end,
  "Arithmetic division",
  {{"rhs", "right hand side"},
   {"lhs", "left hand side"}})

-- Basic math
function log() return "src", "log" end
function log2() return "src", "log2" end
function log10() return "src", "log10" end
function sin() return "src", "sin" end
function cos() return "src", "cos" end
function fabs() return "src", "fabs" end
function sqrt() return "src", "sqrt" end
function exp() return "src", "exp" end
function pow() return "src", "a", "pow" end
