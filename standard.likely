-- Likely Standard Library

-- Spaces are used to separate tokens in the Likely intermediate representation
function likely.concat(...)
  return table.concat({...}, " ")
end

function likely.copy(t)
  local t2 = {}
  for k,v in pairs(t) do
    t2[k] = v
  end
  return t2
end

-- Setup function abstractions
likely.func_mt = {}

function likely.func_mt.__call(f, ...)
  -- Likely functions support both regular Lua function call syntax and single argument tables,
  -- this code must disambiguate between the two and order named arguments appropriately.
  local allArgs = likely.copy(f.args)
  local n = #f.args
  local args = { ... }
  if #args == 1 and type(args[1]) == "table" then
    args = args[1]
  end
  for k,v in pairs(args) do
    if type(k) == "number" then
      allArgs[n+k] = v
    else
      allArgs[f.parameterLUT[k]] = v
    end
  end

  if #allArgs == f.n then
    return f.source(unpack(allArgs))
  elseif #allArgs > f.n then
    local isVarArg = f.parameters[#f.parameters][1] == "..."
    if isVarArg then
      return f.source(unpack(allArgs))
    else
      error("too many arguments")
    end
  else
    -- Return a new function that binds these arguments
    return likely.func(f.source, f.documentation, f.parameters, allArgs)
  end
end

function likely.func(source, documentation, parameters, args)
  local t = {}
  t.likely = "function"
  t.source = source
  t.documentation = documentation
  t.parameters = parameters  
  t.n = #parameters
  t.parameterLUT = {}
  for k,v in pairs(parameters) do
    t.parameterLUT[v[1]] = k
  end

  t.args = {}
  if type(args) == "table" then
    for k,v in pairs(args) do
      if type(k) == "number" then
        t.args[k] = v
      else
        t.args[t.parameterLUT[k]] = v
      end
    end
  end

  setmetatable(t, likely.func_mt)
  return t
end

-- Shorthand for Likely global functions
func = likely.func
new = func(likely.new,
           "Create an empty matrix",
           {{"hash", "matrix hash"},
            {"channels", "matrix channels"},
            {"columns", "matrix columns"},
            {"rows", "matrix rows"},
            {"frames", "matrix frames"},
            {"data", "address of existing data buffer"},
            {"clone", "copy the data buffer"}})
read = func(likely.read,
            "Create a matrix from a file",
            {{"file_name", "path to file on disk"}})
compile = func(likely.compile,
               "Create kernel",
               {{"function", "function expression"}})
print = func(likely.print,
             "Write to console",
             {{"...", "values to print"}})

-- Basic arithmetic
add = func(function(rhs, lhs) return likely.concat(lhs, rhs, "+") end,
           "Arithmetic addition",
           {{"rhs", "right hand side"},
            {"lhs", "left hand side"}})
subtract = func(function(rhs, lhs) return likely.concat(lhs, rhs, "-") end,
                "Arithmetic subtraction",
                {{"rhs", "right hand side"},
                 {"lhs", "left hand side"}})
multiply = func(function(rhs, lhs) return likely.concat(lhs, rhs, "*") end,
                "Arithmetic multiplication",
                {{"rhs", "right hand side"},
                 {"lhs", "left hand side"}})
divide = func(function(rhs, lhs) return likely.concat(lhs, rhs, "/") end,
              "Arithmetic division",
              {{"rhs", "right hand side"},
               {"lhs", "left hand side"}})

-- Basic math
function log() return "src", "log" end
function log2() return "src", "log2" end
function log10() return "src", "log10" end
function sin() return "src", "sin" end
function cos() return "src", "cos" end
function fabs() return "src", "fabs" end
function sqrt() return "src", "sqrt" end
function exp() return "src", "exp" end
function pow() return "src", "a", "pow" end
