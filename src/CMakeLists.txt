set(LIKELY_SRC backend.cpp frontend.cpp)
file(GLOB LIKELY_LIBRARY ${CMAKE_SOURCE_DIR}/library/*)
set(LIKELY_MISC ${LIKELY_LIBRARY}
                ${CMAKE_SOURCE_DIR}/LICENSE.txt
                ${CMAKE_SOURCE_DIR}/README.md
                ${CMAKE_SOURCE_DIR}/include/likely.h
                ${CMAKE_SOURCE_DIR}/include/likely/backend.h
                ${CMAKE_SOURCE_DIR}/include/likely/export.h
                ${CMAKE_SOURCE_DIR}/include/likely/frontend.h
                ${CMAKE_SOURCE_DIR}/include/likely/runtime.h
                ${CMAKE_SOURCE_DIR}/index.html
                ${CMAKE_SOURCE_DIR}/share/likely/LikelyConfig.cmake
                ${CMAKE_SOURCE_DIR}/share/likely/hello_world/README.ll
                ${CMAKE_SOURCE_DIR}/share/likely/hello_world/hello_world_div2.ll
                ${CMAKE_SOURCE_DIR}/src/Doxyfile.in)

# Build standard library
add_executable(embedfile embedfile.c)
add_custom_command(OUTPUT likely_standard_library.c
                   COMMAND embedfile likely_standard_library ${CMAKE_SOURCE_DIR}/library/standard.ll
                   DEPENDS embedfile ${CMAKE_SOURCE_DIR}/library/standard.ll)
set(LIKELY_SRC ${LIKELY_SRC} ${CMAKE_CURRENT_BINARY_DIR}/likely_standard_library.c)
set(LIKELY_DEPENDS ${LIKELY_DEPENDS} likely_standard_library.c)

if(${LIKELY_IO})
  add_definitions(-DLIKELY_IO)
  set(LIKELY_SRC ${LIKELY_SRC} io.cpp opencv.cpp)
  set(LIKELY_MISC ${LIKELY_MISC} ${CMAKE_SOURCE_DIR}/include/likely/io.h
                                 ${CMAKE_SOURCE_DIR}/include/likely/opencv.hpp)
endif()

# CPU Profiling
option(LIKELY_PROFILING "Build Likely for code profiling" OFF)
if(${LIKELY_PROFILING})
  if(NOT VS)
    set(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} -fno-omit-frame-pointer")
    set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -fno-omit-frame-pointer")
  endif()
endif()

# Build runtime-only library
add_definitions(-DLIKELY_LIBRARY)
add_library(likely_runtime STATIC runtime_common.c runtime_stdthread.cpp)

# Build common object files
add_definitions(-D__STDC_CONSTANT_MACROS -D__STDC_FORMAT_MACROS -D__STDC_LIMIT_MACROS)
add_library(likely_object OBJECT ${LIKELY_SRC})
add_dependencies(likely_object likely_runtime ${LIKELY_LIBS} ${LIKELY_DEPENDS})

# Build shared library
add_library(likely SHARED $<TARGET_OBJECTS:likely_object> ${LIKELY_MISC})
set_target_properties(likely PROPERTIES VERSION ${CPACK_PACKAGE_VERSION_MAJOR}.${CPACK_PACKAGE_VERSION_MINOR}.${CPACK_PACKAGE_VERSION_PATCH}
                                        SOVERSION ${CPACK_PACKAGE_VERSION_MAJOR}.${CPACK_PACKAGE_VERSION_MINOR})
target_link_libraries(likely PRIVATE likely_runtime ${LIKELY_LIBS})
install(TARGETS likely ARCHIVE DESTINATION lib
                       LIBRARY DESTINATION lib
                       RUNTIME DESTINATION bin)

# Build static library
add_library(likely_static STATIC $<TARGET_OBJECTS:likely_object>)
if(VS)
  set_target_properties(likely_static PROPERTIES OUTPUT_NAME liblikely) # Avoid name collision
else()
  set_target_properties(likely_static PROPERTIES OUTPUT_NAME likely)
endif()
target_link_libraries(likely_static likely_runtime ${LIKELY_LIBS})
install(TARGETS likely_static ARCHIVE DESTINATION lib)

# Build repl-shell/interpreter/compiler
add_executable(like like.cpp)
set_target_properties(like PROPERTIES OUTPUT_NAME likely)
target_link_libraries(like likely_static)
install(TARGETS like RUNTIME DESTINATION bin)

if(${LIKELY_IO})
  # Benchmark
  add_executable(benchmark benchmark.cpp)
  target_link_libraries(benchmark likely_static opencv_imgproc)
  install(TARGETS benchmark RUNTIME DESTINATION bin)
  add_test(NAME benchmark
           WORKING_DIRECTORY ${CMAKE_SOURCE_DIR}
           COMMAND benchmark -test)
  add_test(NAME benchmark_parallel
           WORKING_DIRECTORY ${CMAKE_SOURCE_DIR}
           COMMAND benchmark -test -parallel)

  # Dream
  find_package(Qt5Quick QUIET)
  find_package(Qt5Widgets QUIET)
  find_package(Qt5PrintSupport QUIET)
  find_package(Qt5OpenGL QUIET)
  if(${Qt5Quick_FOUND} AND ${Qt5Widgets_FOUND} AND ${Qt5PrintSupport_FOUND} AND ${Qt5OpenGL_FOUND})
    # Get QCustomPlot source
    # aux_source_directory(qcustomplot/src QCUSTOMPLOT_SRC)
    # aux_source_directory(qcustomplot/src/plottables QCUSTOMPLOT_SRC_PLOTTABLES)
    # aux_source_directory(qcustomplot/src/items QCUSTOMPLOT_SRC_ITEMS)
    # aux_source_directory(qcustomplot/src/layoutelements QCUSTOMPLOT_SRC_LAYOUTELEMENTS)
    # set(QCUSTOMPLOT_SRC ${QCUSTOMPLOT_SRC} ${QCUSTOMPLOT_SRC_PLOTTABLES} ${QCUSTOMPLOT_SRC_ITEMS} ${QCUSTOMPLOT_SRC_LAYOUTELEMENTS})

    set(CMAKE_AUTOMOC ON)
    add_executable(dream dream.cpp ${QCUSTOMPLOT_SRC})
    qt5_use_modules(dream Quick Widgets PrintSupport OpenGL)
    target_link_libraries(dream likely_static)
    install(TARGETS dream RUNTIME DESTINATION bin)
  endif()
endif()

find_package(Doxygen)
if(${DOXYGEN_FOUND})
  configure_file(${CMAKE_CURRENT_SOURCE_DIR}/Doxyfile.in Doxyfile)
  add_custom_target(doc ${DOXYGEN_EXECUTABLE} Doxyfile)
endif()

# Test standard library
function(test_ast EXPR VALUE)
  string(MAKE_C_IDENTIFIER "${EXPR}" NAME)
  add_test(NAME "${NAME}"
           WORKING_DIRECTORY ${CMAKE_SOURCE_DIR}
           COMMAND like -ast "${EXPR}" -assert "${VALUE}")
endfunction()

function(test_expr EXPR VALUE)
  string(MAKE_C_IDENTIFIER "${EXPR}" NAME)
  add_test(NAME "${NAME}"
           WORKING_DIRECTORY ${CMAKE_SOURCE_DIR}
           COMMAND like "${EXPR}" -assert "${VALUE}")
endfunction()

# List in the order they occur in standard.ll
test_ast("(this is some code) ; This is a comment" "(this is some code)")
test_expr("(+ 1 2) ; One plus two is three" 3)
test_expr("(sq 3)  ; Three squared is nine" 9)
test_ast("x.f" "(f x)")
test_ast("x.f.g" "(g (f x))")
test_ast("x.(f y)" "(f x y)")
test_ast("(f x).g" "(g (f x))")
test_ast("(g x.f)" "(g (f x))")
test_ast("7.2" "7.2")
test_expr("3.sq" 9)
test_expr("1.(+ 2)" 3)
test_ast("x:f y" "(f x y)")
test_ast("z:g x:f y " "(g z (f x y))")
test_ast("x:f (g y)" "(f x (g y))")
test_ast("x.f:h y.g" "(h (f x) (g y))")
test_ast("(g x:f y)" "(g (f x y))")
test_expr("1:+ 2" 3)
test_expr("3.sq:+ 4.sq" 25)
test_expr("(+ 2 2)" 4)
test_expr("(+ 1.8 2)" 3.8)
test_expr("(+ 1.8 2.1)" 3.9)
test_expr("(+ 1.8 2.2)" 4)
test_expr("(- 3 2)" 1)
test_expr("(- 2 3)" -1)
test_expr("(- 3.2 2)" 1.2)
test_expr("(- 3.2 2.1)" 1.1)
test_expr("(- 3.2 2.2)" 1)
test_expr("(- 1)" -1)
test_expr("(- -1.1)" 1.1)
test_expr("(* 1 2)" 2)
test_expr("(* 1.3 2)" 2.6)
test_expr("(* 1.4 2.1)" 2.94)
test_expr("(* 1.5 2.0)" 3)
test_expr("(/ 4 2)" 2)
test_expr("(/ 4.5 2)" 2.25)
test_expr("(/ 4.5 2.5)" 1.8)
test_expr("(/ 4.2 2.1)" 2)
test_expr("(% 7 3)" 1)
test_expr("(% 6 3)" 0)
test_expr("(% 6.5 3)" 0.5)
test_expr("(% -6.5 3)" -0.5)
test_expr("(% 6.5 -3)" 0.5)
test_expr("(% -6.5 -3)" -0.5)
test_expr("(% 6.5 7.5)" 6.5)
test_expr("(% 6.5 3.25)" 0)
test_expr("(== 2 2)" 1)
test_expr("(== 2 2.0)" 1)
test_expr("(== 2 -2)" 0)
test_expr("(== 2 2.1)" 0)
test_expr("(!= 3 3)" 0)
test_expr("(!= 3 3.0)" 0)
test_expr("(!= 3 -3)" 1)
test_expr("(!= 3 3.1)" 1)
test_expr("(< 4 5)" 1)
test_expr("(< 4 -5.0)" 0)
test_expr("(< 4 4.0)" 0)
test_expr("(<= 4 5)" 1)
test_expr("(<= 4 -5.0)" 0)
test_expr("(<= 4 4.0)" 1)
test_expr("(> 6 7)" 0)
test_expr("(> 6 -7.0)" 1)
test_expr("(> 6 6.0)" 0)
test_expr("(>= 6 7)" 0)
test_expr("(>= 6 -7.0)" 1)
test_expr("(>= 6 6.0)" 1)
test_expr("(& 1 2) " 0)
test_expr("(& 1 3) " 1)
test_expr("(| 1 2)  " 3)
test_expr("(| 1 3)  " 3)
test_expr("(^ 1 2)   " 3)
test_expr("(^ 1 3)   " 2)
test_expr("(<< 2 0)" 2)
test_expr("(<< 2 1)" 4)
test_expr("(>> 2 0) " 2)
test_expr("(>> 2 1) " 1)
test_expr("(>> 2 2) " 0)
test_expr("(>> -2 0)" -2)
test_expr("(>> -2 1)" -1)
test_expr("(sqrt 2)" 1.41421)
test_expr("(sqrt 2.1)" 1.44914)
test_expr("(sqrt 4)" 2)
test_expr("(sqrt 0)" 0)
test_expr("(sin 0)" 0)
test_expr("(sin 1.570796)" 1)
test_expr("(sin -1.570796)" -1)
test_expr("(sin 0.523599)" 0.5)
test_expr("(cos 0)" 1)
test_expr("(cos 3.141593)" -1)
test_expr("(cos 1.047198)" 0.5)
test_expr("(pow 2 3)" 8)
test_expr("(pow 2 -3)" 0.125)
test_expr("(pow -2 3)" -8)
test_expr("(pow 1.5 0.5)" 1.22474)
test_expr("(pow 2 0.5)" 1.41421)
test_expr("(pow 4 0.5)" 2)
test_expr("(pow 4 0)" 1)
test_expr("(exp 0)" 1)
test_expr("(exp 1)" 2.71828)
test_expr("(exp 1.5)" 4.48169)
test_expr("(exp2 0)" 1)
test_expr("(exp2 1)" 2)
test_expr("(exp2 0.5)" 1.41421)
test_expr("(exp2 3)" 8)
test_expr("(log 1)" 0)
test_expr("(log 2.718281)" 1)
test_expr("(log 7.389056)" 2)
test_expr("(log 0.5)" -0.693147)
test_expr("(log10 1)" 0)
test_expr("(log10 10)" 1)
test_expr("(log10 100)" 2)
test_expr("(log10 0.5)" -0.30103)
test_expr("(log2 1)" 0)
test_expr("(log2 2)" 1)
test_expr("(log2 4)" 2)
test_expr("(log2 0.5)" -1)
test_expr("(log2 10)" 3.32193)
test_expr("(copysign 3 -1.1)" -3)
test_expr("(copysign -4.3 2)" 4.3)
test_expr("(floor 2.3)" 2)
test_expr("(floor 3.8)" 3)
test_expr("(floor 5.5)" 5)
test_expr("(floor -2.3)" -3)
test_expr("(floor -3.8)" -4)
test_expr("(floor -5.5)" -6)
test_expr("(ceil 2.3)" 3)
test_expr("(ceil 3.8)" 4)
test_expr("(ceil 5.5)" 6)
test_expr("(ceil -2.3)" -2)
test_expr("(ceil -3.8)" -3)
test_expr("(ceil -5.5)" -5)
test_expr("(trunc 2.3)" 2)
test_expr("(trunc 3.8)" 3)
test_expr("(trunc 5.5)" 5)
test_expr("(trunc -2.3)" -2)
test_expr("(trunc -3.8)" -3)
test_expr("(trunc -5.5)" -5)
test_expr("(round 2.3)" 2)
test_expr("(round 3.8)" 4)
test_expr("(round 5.5)" 6)
test_expr("(round -2.3)" -2)
test_expr("(round -3.8)" -4)
test_expr("(round -5.5)" -6)
test_expr("(try (+ 1 1) 3)" 2)
test_expr("(try (+ 1) 3)" 3)
test_expr("e" 2.71828)
test_expr("pi" 3.14159)
test_expr("(not 0.0)" 1)
test_expr("(not 1.1)" 0)
test_expr("(bool 0.0)" 0)
test_expr("(bool 1.1)" 1)
test_expr("(sq -1.3)" 1.69)
test_expr("(abs -1.3)" 1.3)
test_expr("(and 0 1)" 0)
test_expr("(and 1 1)" 1)
test_expr("(or 0 1)" 1)
test_expr("(or 1 1)" 1)
test_expr("(xor 0 1)" 1)
test_expr("(xor 1 1)" 0)
test_expr("(min -1 1.3)" -1)
test_expr("(max 1 -1.3)" 1)
test_expr("(cast 2.3 2)" 2)
test_expr("(cast 2.3 2.f32)" 2.3)
test_expr("(threshold-binary 0.4 0.5 1)" 0)
test_expr("(threshold-binary 0.5 0.5 1)" 0)
test_expr("(threshold-binary 0.6 0.5 1)" 1)
test_expr("(threshold-binary-inv 0.4 0.5 1)" 1)
test_expr("(threshold-binary-inv 0.5 0.5 1)" 1)
test_expr("(threshold-binary-inv 0.6 0.5 1)" 0)
test_expr("(threshold-truncate 0.4 0.5)" 0.4)
test_expr("(threshold-truncate 0.5 0.5)" 0.5)
test_expr("(threshold-truncate 0.6 0.5)" 0.5)
test_expr("(threshold-to-zero 0.4 0.5)" 0)
test_expr("(threshold-to-zero 0.5 0.5)" 0)
test_expr("(threshold-to-zero 0.6 0.5)" 0.6)
test_expr("(threshold-to-zero-inverse 0.4 0.5)" 0.4)
test_expr("(threshold-to-zero-inverse 0.5 0.5)" 0.5)
test_expr("(threshold-to-zero-inverse 0.6 0.5)" 0)

# Test other library files
function(test_demo FILE)
  add_test(NAME ${FILE}
           WORKING_DIRECTORY ${CMAKE_SOURCE_DIR}
           COMMAND like library/${FILE}.ll -parallel -show -assert "data/demo/${FILE}.jpg")
endfunction()

function(test_file FILE VALUE)
  add_test(NAME ${FILE}
           WORKING_DIRECTORY ${CMAKE_SOURCE_DIR}
           COMMAND like library/${FILE}.ll -assert "${VALUE}")
endfunction()

# List alphabetically
test_file(c_api "")
test_file(comments 42)
test_file(demos "")
test_file(export 3)
test_demo(gabor_wavelet)
test_demo(hello_world)
test_file(likely "")
test_demo(mandelbrot_set)
test_file(matrix_io "Compression Ratio: 7.31714")
test_file(tutorial "")

# Test algorithms
option(LIKELY_TEST_ALGORITHMS "Run computationally demanding tests" ON)
if(${LIKELY_TEST_ALGORITHMS})
  test_demo(average_face)
endif()
